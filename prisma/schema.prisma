generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  names   Name[] // Names added by the user
  likes   NameLike[]
  reports NameReport[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Name {
  id             String         @id @default(uuid())
  name           String         @unique
  nicknames      NameNickname[]
  gender         Gender
  meaning        String?
  additionalInfo String?
  addedById      String?
  addedBy        User?          @relation(fields: [addedById], references: [id], onDelete: SetNull)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  likes          NameLike[]
  reports        NameReport[]
}

model Nickname {
  id       String         @id @default(uuid())
  nickname String         @unique
  names    NameNickname[]
}

model NameNickname {
  id         String   @id @default(uuid())
  nameId     String
  nicknameId String
  name       Name     @relation(fields: [nameId], references: [id], onDelete: Cascade)
  nickname   Nickname @relation(fields: [nicknameId], references: [id], onDelete: Cascade)

  // Ensures the same name-nickname pair isn't duplicated
  @@unique([nameId, nicknameId])
}

model NameLike {
  id        String   @id @default(uuid())
  userId    String
  nameId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      Name     @relation(fields: [nameId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  // A user can like a name only once
  @@unique([userId, nameId])
}

model NameReport {
  id        String       @id @default(uuid())
  userId    String
  nameId    String
  reason    ReportReason
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      Name         @relation(fields: [nameId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
}

enum ReportReason {
  INCORRECT
  OFFENSIVE
  DUPLICATE
  OTHER
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}
